% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/brms_fit_check.R
\name{wrap_diagnose}
\alias{wrap_diagnose}
\title{Diagnose a brm() call}
\usage{
wrap_diagnose(brm_call, skip_refit = FALSE)
}
\arguments{
\item{brm_call}{A `brm(...)` call, where `...` contains all the requisite
arguments for fitting a model, including `file`}

\item{skip_refit}{Logical,d efault `FALSE`, whether to skip refitting the
model and return the file saved to the disk.}
}
\value{
Executes the `brm(...)` call, refitting according to `determine_refit`
}
\description{
"wrapper function" isn't quite the right term for this, but this function
takes a `brm(...)` call, defuses it, checks the refit diagnostics using the
arguments in that call, then executes the original call. Usage is
`wrap_diagnose(brm(...))`.
}
\details{
If you have a brm() call already set up and want to programmatically check
the refit diagnostics, then refit according to some decision criterion, then
you'll need to use some metaprogramming techniques to run both
`diagnose_refit` and `brm`. This function will defuse a `brm(...)` call,
run `diagnose_refit(...)` with the same passed arguments, then execute the
original `brm(...)` call with `file_refit` changed to the output of
`determine_refit(diagnose_refit(...))`. The final model is then returned.
If the model doesn't need to be refit, the original model is returned.
If the model does need to be refit, then it is recompiled and refit.
If you no longer need this (ie once the analysis is finished), then you can
just remove the `wrap_diagnose` text and be done without having to clean up
any metaprogramming. Compare the example here to the example for `diagnose_refit`
}
\examples{
\dontrun{

# Example of using this in a function that sets up the hyper parameters already
# When we no longer need it, we can just delete the `wrap_diagnose`
fit_generic_model <- function(formula, filename, data=model_data, priors=base_model_priors) {
  # We need the full brm call, so we keep it in an expression.
  mdl <- wrap_diagnose(brm(formula = formula,
                               data = data,
                               family = lognormal(),
                               seed = 111,
                               cores = 4,
                               chains = 4,
                               threads = threading(3),
                               file = file.path(here::here("Models"), paste0(filename, ".rds")),
                               file_refit = "on_change",
                               iter = 10000,
                               warmup = 2000,
                               thin = 2,
                               silent = 0,
                               verbose = TRUE,
                               save_pars = save_pars(all = TRUE),
                               backend = 'cmdstanr',
                               prior = priors))

  mdl
}
}

}
